#Reference
ref = 'GTCCATAGAGCAAGAGCTGTCCTTCTTCTGGGGGTCCGGATTCAGCACCGAACTATGCTAATCACTGCTGTTACGGCTACAGCCGGAATAAGGGGGCCTCTTTTTTGCTCAACTTAGAATCCCTTTGTCTAGGCTATAGGTCTACTCAGCCACGTC'

k = 12 #kmer length

DNA = [
'CTCCTATTTAAATCAACCAAGGTATCCTTCTTATACACGCACCTTAGCCCGCGTAGATTAGCTTACATTTTTCAACGCAGGCACACATAAATTACCAGAGACACAGTCGATTCAAGGCCTTCTCTCCACCTAAACCCTAGAGCAGGCGTTCGGGTA',
'ATGTGCATTGCTGAGATTGTCCTTCGAAGGCGAACATGCCGTACAGCATCCTACTACTGAGAGGTAAGTGTTTTGTCATTCCTCCCGAACGACGGGATTGGTTCACAGTTCAGAGTGAACTCGGTTCTCAATAACATCTCGTCTGCTCAAATAAAA',
'CCTCCCGTCGCTGACCAAGTATCAGCCCATAAAGCATTGGAAACGGAAGCGAGGAGCCAGGGCGCCGTGCCGTCAGTCATTGACAGCGTCCTGCTTGTACTCTGAGATGCTGTATGTGGTCGTACGTTCGAGGAGCGGATGAGTCCGGCCGGGCCC',
'CGCACGGAACCGGCGGGTGTCCTAGTACTTCAATGCGTGGTAGGGATAACAGTTGTGGTAGACTAGCTAAGAGACTGTCCCAGAATATAGGCCCTTGGGGACGACTTAGTCCTTACAGCAACTTGTATTAATTCCATGCACTGCCCGAGGACGCGC',
'GCGAGGCTGGTGTGCCCTATAGCAGTCGACATGCGTGATCTAAACGCATTCGGACGTCCATAGGGCACGGAACGTCGGTGGCTATGTTGGTAGGTCCGCATAGAAAGGGCACGGGTGTAAATCGCCGAAATCACCCCAATTACTAGGAGGCACACG',
'TGCCCTATAGCAATATTCGTCCGTATCGCTTCTGAGTCCGTTGGATCGTCTTTAAATTCACTGAGTGAACTTCTGACCCAGCCGAGAGAGGACTGGTTCCACGTTCGACGAAAATTCTTATAATTGGTCCAGACTATTTAGGTACCACGTGCAAGG',
'ATATAGATTGGGGAGCTCCAAATTCAACAGGAGTAGCGGCGTCCTACAGTCCATAGAGCAGTAGTGCTTAGCGGACATTTGCGCCCTGCCCCGTACTGTGTTGTAAAGAACCCATCGTACCGTTGGATACCACAATATCCGGTCATGCAACGGTGA',
'TGAGCGGTTTCTGAATTTTGTACTTCATATACTGTAACCCATAGAGCAGTCGTGGCTTGACCGCGAATCACACGACAAGATTTTCTATCATGGGGACGTACGAAAGTCCGGGTGTCTTACAGATGCATAGATCTCGGTCAGATGGTCGTCTTCCAG',
'TCCTAATCTGCTTGCTGAGGTGCATGTTTGTCGACGCTACGTGTGGAGGGGGCGTTGCCTGTAGAGCCAAGCTTTTGCTGTCTAGGGGAGTGTGGTTTAATAGTCGCATAGTGCGTACGTAAAAGTAGTCTATACCGTAGAGCATGGTGACCACCC',
'TTTAGTTAGCACAATTGTAGAAAAGGCATGATCTGAACGTCGACCGAGTTTGTCGAGTGGACACACTGCACACGATGTCTTCCCAGCTTTGCCGATAACCCTAAAGCAACCGTTGATAATTGCTTACAGTACGGATTTCACTCGGTAGAGTCGCAA',
'GTACGATGTACGATCCCTACAGCAACTAGCCAACGCACGTACGGATACCCTGCGCTGAGCAATTGGTTGTCCGAGTATCATAATCAGGTGAGTCATCAGCCTCGGCACTTAGAGCTCGCTAATTATCCGGTTCATCGTGCTTATGATCTGCTCACG',
'TCCTGTGCCACTTAGTGGTCTGATAGGCAGCTCCTTTAATTTGCTCCAATGGAGTTTCGAGTGGTGCACTTCCCCAGCCGAGTCGGTTGGTCTTGTCCAATCTCAATCTATCAGATACTTGGGTCACGTAGGAACGATTGGACCGGCCCTAGAGCA',
'GCGTAGCAATTATCAGGGCTGCAACTTCAGGAAAAAGGCCATATAGCAAGCGTGGGGTGAGGAAGCAAAACAATGACTTTGGCACGCCGCCCATGGGGACAACTTTCTGCCCAGCCGGTGATCAACGTCTCACTACTGGGAAGCGTCAGCCGCTGA',
'ATTAAGGCATGTCAGGCAGCAGAGAGCTATGTGGGGCCCGTGACGGCTGTAGGTGGCGTCACGGCCCTCGCACACGTGCAGTGTGCCCGTAAAGCACTCTTCTTGATTAATGGATATTGCCTTACCACTGAGTGGCTATGGTCACCTTGGCCCGGG',
'CTGTCCGGAAGCGCGAGTGTGTGTTTCATATGCAAGCCCCTTACAGCATGTCAACTTCGCAGATGGACCGGGTTACGATCAGGTTTCCTGTCGATCCAATCTGCGCCCACAGCCCTCTGTATATGTCAGTCTTGAAATCGACCAACTGGGTCAGCG',
'CCTTTTGAAAAGAATTTAAGTCTGTTCCCTAAAGCAAGAAATCAACCAGCGTGTGGCCTTTCTTTTAATGAAGCGAATTGGACCAATAATCAGCTTCCACATCTGTGTCGGACGCAGGCGGTCTGCTAGCATTAAAACCGAACGGTAGTATTATTT',
'TAAAGTGCCAGTTGCCCTCAAGGACTCCCTACAGCAACCTAGTTAGGTGGCGAATCGCGTGCCCGGACGTCGCTAAACGTAATGATTAGCTACGGACGATCAGTATTCCGACTTAATATCACGTACGGTTGGTTCAGTCCAGAGACGAAGCCAACG',
'TTATACACCGGTATAAGGGAATTATTACGAATGATGTCCCGTATTCTCAGCTCAAACACAAACCCTATAGCAATTGCCTAATCGGGTCGGGAGCATCCCCATTTTCCGGTTCCTTCCCTACGTGACAAGAAAGGTCTGGGCAGACAATTGACCGGA',
'GGCCAATATTGTAATAAACGAAATGAGTGTCGTGCATCGACAGGCTGAGGGTAGACGTAACTCCGTATAGCAACCCTATAGCAGCGTCCTCTCTCGCAACGCGCTAGGCAGTTTTTTGGACTTTAGGACTTTCAGGCATGGTGATTGTTCACAGTA',
'GGGGCGGGGGAAGCATTTCGTCTTGACGCAAAGACCCACCCTACAGCATCTTAGCTTTCGCGATGCAGGTTCTGGTCTACGGACGAGAAACCCCGGTACCTGCGTGGCATCTCAGCGTACCAAAAGCATAGACGAGAGGTCGAGAGGGGTCATGTG',
'AATGCCTCCGCCGCCGTTCAGCAATGACTAGCGTTCTGAAGGGCCAGTGACCCTAGAGCACGTACATGAACCCGGGAAATCTGCATGATCATCCATAATACTGTTATAGACACAGTAAAGTGAACCTCTTTTGCGGATAACAGAGCCTCCTAAGTT',
'TTATCGATGCCGGCATGATCCCCGGACCGTATAGCAAGGCTGTCCGCACTCGCATGCCTGACCACGGGCCTCACTCTTGACTGAGCCTTGCGACGGACGAAGGGTACTTGCAGGCAGTGTGTATGAGTATGAGCTTGCAAAGACTTAAGGAAGACG',
'ACGTGTAGACGCATCCATAGAGCAGTGACGCGACCACAGGGGTCCAGAGTCTCCACCAGAAGACTCCCGTCCACGTCTTGCCGATCCCCGCGTCTGGTACAATACCGTAGCGTTTGGGACGGTCGAACTTATTAGGTCGAAACAAATGGCACGGCT',
'GTGAAATAAGCGGGTTCGGATTTTGTTTATCCCTATGGGAACTATAATAAAATTAAACTAGTGGAGCAGCAGGGACCGTCACCGGGGTCCCGAAGGAACGCAGGTCTGGTGCTTCCCGAGGGGTTCCTAGTGGGTTGGTATCAGGGCCATAGAGCA'
]

a = [0.0] * k
c = [0.0] * k
g = [0.0] * k
t = [0.0] * k

def prob(kmer):
    for i in range(0,k):
        Total[i] = A[i]+C[i]+G[i]+T[i]
        a[i] = A[i]/Total[i]
        c[i] = C[i]/Total[i]
        g[i] = G[i]/Total[i]
        t[i] = T[i]/Total[i]
    prob = 1
    pos = 0
    for nt in kmer:
        if nt == "A":
            prob = prob * a[pos]
        elif nt == "C":
            prob = prob * c[pos]
        elif nt == "G":
            prob = prob * g[pos]
        elif nt == "T":
            prob = prob * t[pos]
        pos += 1    
    return prob       
        
best_motifs_perm = []        
for i in range(0,len(ref)-k+1):
    best_motifs_temp = []
    kmer = ref[i:i+k]
    best_motifs_temp.append(kmer)
    A = [1.0] * k
    C = [1.0] * k
    G = [1.0] * k
    T = [1.0] * k
    a = [0.0] * k
    c = [0.0] * k
    g = [0.0] * k
    t = [0.0] * k
    Total = [0.0] * k
    pos = 0
    for nt in kmer:
        if nt == "A":
            A[pos] += 1
        elif nt == "C":
            C[pos] += 1
        elif nt == "G":
            G[pos] += 1
        elif nt == "T":
            T[pos] += 1
        pos += 1    
    for seq in DNA:
        prob_dict = []
        for j in range(0,len(seq)-k+1):
            mer = seq[j:j+k]
            prob_dict.append({mer:prob(mer)})
        prob_list = []        
        for dict in prob_dict:
            for pattern in dict:
                prob_list.append(dict[pattern])
            max_val = max(prob_list)
        stop = 0
        for dict in prob_dict:
            for pattern in dict:
                if dict[pattern] == max_val:
                    if stop == 0:
                        best = pattern
                        stop = 1
        pos = 0
        best_motifs_temp.append(best)
        for nt in best:
            if nt == "A":
                A[pos] += 1
            elif nt == "C":
                C[pos] += 1
            elif nt == "G":
                G[pos] += 1
            elif nt == "T":
                T[pos] += 1
            pos += 1          

    A = 0
    C = 0
    G = 0
    T = 0

    x = 0
    y = 0

    consensus = ""
    a = ""
    c = ""
    g = ""
    t = ""    
    
    while x < (len(best_motifs_temp[0])):
        while y < len(best_motifs_temp):
            if best_motifs_temp[y][x] == "A":
                A += 1
            elif best_motifs_temp[y][x] == "C":
                C += 1
            elif best_motifs_temp[y][x] == "G":
                G += 1    
            elif best_motifs_temp[y][x] == "T":
                T += 1
            y += 1

        z = 0        
        if A == max(A,C,G,T):
            consensus = consensus + "A"
        elif C == max(A,C,G,T):
            consensus = consensus + "C"
        elif G == max(A,C,G,T):
            consensus = consensus + "G"
        elif T == max(A,C,G,T):
            consensus = consensus + "T"

        a = a + str(A)
        c = c + str(C)
        g = g + str(G)
        t = t + str(T)
               
        x += 1
        y = 0
        A = 0
        C = 0
        G = 0
        T = 0
    
    score = 0
    pos = 0
    for nt in consensus:
        for kmer in best_motifs_temp:
            if kmer[pos] == nt:
                pass
            else:
                score += 1
        pos += 1
    
    best_motifs_temp.append(score)
    best_motifs_perm.append(best_motifs_temp)
    
scores = []
for list in best_motifs_perm:
    scores.append(list[25])
for list in best_motifs_perm:
    if list[25] == min(scores):
        for i in list:
            print i
        break

'''
Output
GTCCATAGAGCA
AACCCTAGAGCA
TGCCGTACAGCA
GCCCATAAAGCA
GTCCTTACAGCA
GTCCATAGGGCA
TGCCCTATAGCA
GTCCATAGAGCA
ACCCATAGAGCA
TACCGTAGAGCA
AACCCTAAAGCA
ATCCCTACAGCA
GGCCCTAGAGCA
GGCCATATAGCA
GCCCGTAAAGCA
CCCCTTACAGCA
TTCCCTAAAGCA
CTCCCTACAGCA
AACCCTATAGCA
AACCCTATAGCA
CACCCTACAGCA
GACCCTAGAGCA
GACCGTATAGCA
ATCCATAGAGCA
GGCCATAGAGCA
61
'''
