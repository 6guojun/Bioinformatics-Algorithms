#Finds most probable kmer based on profile
def prof_most_prob(string,k,a,c,g,t):
    kmers_probs = []
    probs = []
    for i in range(0,len(string)-k+1):
        kmer = string[i:i+k]
        prob = 1
        pos = 0
        for nt in kmer:
            if nt == "A":
                prob = prob * a[pos]
            elif nt == "C":
                prob = prob * c[pos]
            elif nt == "G":
                prob = prob * g[pos]
            elif nt == "T":
                prob = prob * t[pos]
            pos += 1    
        kmers_probs.append({kmer:prob})
        probs.append(prob)
    for pair in kmers_probs:
        for kmer in pair:
            if pair[kmer] == max(probs):
                return kmer

#Scores a set of kmers based on consensus scoring method
def score(list,k):
    AA = [0] * k
    CC = [0] * k
    GG = [0] * k
    TT = [0] * k

    consensus = ''
    
    for kmer in list:
        for i in range(0,len(kmer)):
            if kmer[i] == "A":
                AA[i] += 1
            elif kmer[i] == "C":
                CC[i] += 1
            elif kmer[i] == "G":
                GG[i] += 1
            elif kmer[i] == "T":
                TT[i] += 1
                
    for i in range(0,k):
        if AA[i] == max(AA[i],CC[i],GG[i],TT[i]):
            consensus = consensus + "A"
        elif CC[i] == max(AA[i],CC[i],GG[i],TT[i]):
            consensus = consensus + "C"
        elif GG[i] == max(AA[i],CC[i],GG[i],TT[i]):
            consensus = consensus + "G"
        elif TT[i] == max(AA[i],CC[i],GG[i],TT[i]):
            consensus = consensus + "T"
    
    score = 0
    pos = 0
    for nt in consensus:
        for kmer in list:
            if kmer[pos] == nt:
                pass
            else:
                score += 1
        pos += 1
    return score

#################################

k = 15

DNA = [
'GTCCTTTTTTCTATTCGTATCCCATTCAAGTCCAACCGTAGAGTGGAGAGCACACTGCAGACGACCTATCTCACACAATCAATGTGTCTATCCACCCAACAACTGTTAATACCTACCACCGACACATCCTTATCAAAGCAGAAGGTCGTAGCATATACCGGGCAGTGAAATTGAGTTCGCTTTGATATACAGAGCCTCAGCTAAGTTAAATACCCATCGGGAAGTTGGAGTTCAACTCCGAACAGCTTCACCTTTCACACCAATAATGGGGACGCTGTCAAATCTACAGGCATGGGTTCTTAGAGAATCATCATTGTCCTTTTTTCTATT',
'CGTATCCCATTCAAGTCCAACCGTAGAGTGGAGAGCACACTGCAGACGACCTATCTCACACAATCAATGTGTCTATCCACCCAACAACTGTTAATACCTACCACCGACACATCCTTATCAAAGCAGAAGGTCGTAGCATATAGCAATCAAACGTTGACCGGGCAGTGAAATTGAGTTCGCTTTGATATACAGAGCCTCAGCTAAGTTAAATACCCATCGGGAAGTTGGAGTTCAACTCCGAACAGCTTCACCTTTCACACCAATAATGGGGACGCTGTCAAATCTACAGGCATGGGTTCTTAGAGAATCATCATTGTCCTTTTTTCTATT',
'CTCGATCGTCGGAACACAGTGAAACTATACTGGTCCAGCAAGGATTCCTTAACTTTTGTGCCAAGTCGCTAAAAACGTTGAGAGCAACTGTTGCGTAGTGGGCTGAGCACATGGGTGCAGATTTACGGAACCCGTTGCCTTTTTCCAAAATGCTCAGCGGGCATTTTATCGTGGCTCTGAAAACTGTTGCGCATGTACAACGGAACACGTAGCATCCGACGGCACGAAGCCCTAGTGACACTTCGATAACATCTCTCGCAGTGCTCCTAGGATGGCGACGCTCGTGTTAAGCCTACGAGCTCTCGAACCACGCGGCGCTTGGATGGTGCT',
'CAATCCGAATTTGCTCGGCGTTACCGAGATCCAGAGCACTCATCTCTAGATCAAGATTGCCAATGACGAGGTCTACGCACCTGTCGCTCTTCGGGTCTATCATAGCATTTCATCACAAACATCCTTCTTTCCCCGTCCTACTTAATAAATCTATCTTAGTGGTGAAGGCATTTTAACGTTGATGGCGGGGACTACCGTGGCATACTCGACTTGCTAACCTCTATCCGATTGAAAATACTTTATACGAAGATCGCCCGGCTCGATTTCAGGTCCATCGATAATAACCTATGCTTCTTAGTTTGTTGAGCAGTGCTATCGACCCCTAGCCCA',
'CCGGCTCGTAAAATTGCGCCGTTCTACGGTTTCACTCTTGGTGGTCGTAGGTTCCATGGCATACGAGCTGAAGCCAGCCTGTGAACACCCCGACTACGGGGTAAGGTTTCTCATTTGCAGATTTCCAAGATGCGGACTTCGGGGAAACTAAGGGCCGTAGTGGACGAGACACTTGGGACCCGGGTCCCTATCTGCCTAGTGCTGGGTATTTAGCTAACCGCAGTACGACTGTGAAGAACGGTTTTCCCACGATTGGTCATCAGAGGAAGGGACCTTATAATGGCCAGTTTTCACATAAAAACGTTTTTCTCCTGGGAGTGTCGTTGGCTC',
'ATTGTCCCAGTTAAGTTCCGTGACGACCGGTGATCAATCCTGTACCCGAGTCTTGTTTTGAGCGTTCTGCCCCAGGGGACGCGCGCTAATGCCAGTAATGCTCACTCAAAAGGGCGTCGTAATTCCCGCAAGATTTCGACTTAGTATCTCCTTCTTTATTAAAAGTCTCCCGTAGAACTTCCCAGTTGATCGATAAGAGCCTAATCTACATAGCCAAGGTAGGATAGACATGAGGTCCGCTATTGATAACCTAGTAGAAACAACTCCAGAGGCCAGTATAGGCATAAAAACTCGGACCCGTGACTGGGGGGCAGCGAGCGCCTACGTGTG',
'CTGTTTTAAACGCTCAACAAATGCCGGGGCGAAGTGATATTCCGATTCTACATTAATTGGATGCTGCTCGGACACCCTAAGACGCAGTGAGACGGAAAATTCCAAGTAACTGAGTTGTGCCCAGCTGCAAAGTGACATGGGTGTATTATCAACTCTCTCATACCTCTTACGGTCTCATATGTCAACTGAAGAGGATTGTTGCATTAGGGCCCTCAGTGGCAATGAACACCCCAGATACATATTTCAGATATCATAGGCATAAAAACGCAAAAGTAAAAATTTTAGACAGAGACCTTAAGACTAGTACGTGCCTTTTGAAGGAGCTCGAAC',
'GTGAGCGTTATTACGCAACGCGAAGAGAGTTCTGGTCGTTGTCTAATCGGGCGTTTCAAGTGGAGTAATAGCGCAGAAGGGGCTGATCGGGCGCCATCCCACTTTTTAGCGTGTCCCGCAGACAGCGGCATAAAACATTTGACTGTGCCCGTCCCTAACCTAACTATAACGAACACCCTTGTAGGTCTCCCCGGGGGCCAGCGCTAACACCACTGTCGTGCGCCCCCTTTATCTTAAGACAGGCCGCAACACGGTTTCGAGGGATGTCGCTAGTGCATAGTTACAGCTATTTCCGCTGTGAGGTGACTACTCAAGTTGGAAGAGGAGTCA',
'GTTAATTTTGCAATAAGCAGGGACTGCTTAGGCGTTGGGAGAATTACTACCCATCTCGGGCCTACCCAGTACAAAATAAGCAAAAAAGGGAAGATGTATAGGCCTATATTAAATACCACGACGTGAGTTTTACATAGTAAGTACGCTCTGACATCTTCAGGACTGCATATGACCGTTAAAAAACGTTGATTATTGGGCCGTGAGTATCTGGGCTTTCCACGTAAGAATATAGCTCCCCTACCACGTTGACCTCATGTTCGATGCAATCGTGCGTCGAGGGTTTCCTGCAAGGGTTACGTTGCTCAGGATTCAAATCGCTATGCCTTGAAT',
'ATTTTGTCCACAGTGCAGGCATACGCACGTTGAGGGTCCCTGGCGGTTGCTTAGGCGTTAGAGGGAACTACCTAGTACGCAGTGACAACTGCTACTCTGGAGTCGGTGTCTGTGCGACGCTCGGTGGAAGTTTTCGCGCAGTCGGTCTCTGCAGGTCAAGGTCGGGCAACAAGTGTTTAGAATCGCTGTCTTATTACGATGCTAGTGGGGGTCATGGAACCACCTCTTTTACTGGTTATGACGCGCAGCGGAGGGAAGAGTACTCTAGGGCACGGCTAGGTACCCTCTCTGGCGGGACTCAGTTAACTCGGTGTAGTACGAAGGTGGCAC',
'CCCACGTATCCCGGTTTAAGTCAAGTACGAAAACGCAAAAGAGTCAGTCCACAACGCTGGCCTTTTTCCGCCTGTTACCGCACACGATCATTCCGCAGCCTATACTGTGGTCGTCGACCCGAGTGAGAGCCAAATGTTGGCGGGTCGAATTTATCAGCTCCACATACTAATTATATATATTAACTGGACTCGTTCAGTGTGATGCGTCGTTTGTGTTTGGCGTGTCTTCCAGCACCCACATAGGTGCAACTGCATAAGCGCGTTGACCACCGGCGAACGCTGGGGCTCGTTGTCATTACCACTCTCGCCTGCTATATTTCCGGCCCGTTG',
'AGAATAGCACGCTGACGCCAAGCGAGCAGATATAAGCCCCCCGACTTGCAGGGCCCCATATACATGAACTTGTTGTGGCAGCGAGCTAACTTATGAAATTACATAAAGATGCTTCTAATGTATCTACGATTCATCGCGATCTCGTGCTGATCAACGGCGCGTCTCTAATTAATCCTATCTAAAAGCGCATAAGGGCGTTGAGTAATCTTCTACCGCAATTAATGGTTAAAAGCATCTGGCTGCTGGAGATCAAGGCCGCATCTGATCAGCTAGCAGAGTCGCAAAAACCCGAGCCCATTGCAGTAGTGGCAGCGTGAATCAGAGCATGGG',
'ATAACGTGGTCTGACACCGTGCCAAACTTGGTCGTCTGGGGGCGGACCTTAGTTTTACTCTGAACACCTGGGTAAAAGCGGAGTTAGAACGTTTGTGAACCTAAGAGTCTCAAAAGAGCTGAGTCTAATCCCCTTACTTGAAATCTGGGGAGCCCACCCGCCGGGAAAATATATGAACCTACTTGATACAAAACGCATGTGCGATATGCTGGTGATTACTTGAGCCCTCGACGATTCTACAGCATCTTGGTGAGATAAAAACGTTGGCCACTTCAATATTGCGCTGGCACCAGCAGACTGATTAAAATTGCTAGGTAGGATTTAATCTCA',
'TTTATCTCGTCCGGCAGCGCTTACTGAATCAAGTGATCTGTGCGAGTGGCGTTGAAACGAGCTCACTGCTCGAGGATCTCAGAAGACTGGGGCAACACTTTGTTTGCAGGGTTGACGGGCGGAAGGCCTTTCAAGAGGCATCTACGAATGCAAATATAGCCTAATCGCTTTTTCCCACCGTACCACAGGGGGCGTACTGCTCAGATCAGGACCATTGGCTGGGGTCCCTTTTATCGTCGATGGGAGCTACTACGTCTACTACGCTTCCACCCGTGCTTGCCTGATTCGCATAAAAACGTACCTATTAACATGCACTGAACCCAAACCCGT',
'TGCTCGCATACGCCGGACATTCACGTATATTGAGCGAGCGACTACCAGTGGACGTCTTAATATACTACACGGCAGACGAAGGCACCCAAACGTTGAAGAAACACCTGGAGTAGACAGCATAGGCAAGAAATCCTAATGGTTTTCAAGGTCTGTAGGGTTCTGGATGTTGCAACCGGAAGCACGACGTACTCACGAAGTGCAGTACGGCATTCGCAGACAAATGGAGTATTATATGTTGGACGTGTTTAATCGGTTTTTTTCTTTTGTCGAACGGTGGTGATGACTGGCCCAGATACCTCGCGCAGCAGATGTACGCGGCCGTCATGATCA',
'ACCCACTTTCATTTAAGTATCGAAGCCAGCATGCTCAGGTATCTTCAAAGCAGGTCGGACGGGCTCCAAAACGTTGACCTCCGCTGTATCTTTAAAATGTGGTGGCGTGCCCTACGATAGCTCACAGGTAAGGGAATCGATGAATTCAATTGACTGACATCTTAGCCCTCGCCAACTGTGGGCAGTAACCGTGATTTTCATTGATCTTGTTATGGATGCGTATCCTGTAGTCTATTGTGGGACTCTAGAGTTGACTCTCGCGGACCATACAGCTACACGACTCGTCCTCATCCAAGCCGACCGTGGATTTGAAAAAGTCCTCGGCCTGGA',
'CTACCCATATAGGGACCAGCCAGTAAGACCACATAACGGCGCAGCCCAATTTGTCCAGTCTCGCGTGACAAAGGATCCTACGTCTGAAGTCACTTATTTCGTGTACACCAGAAGGTTCACCTACAAAGGCGGTTCTTCGCCTGTATTGCCTCGTGTACATCGTACCGGCATCCTAACGTTGAGTAGCATTGCGGGGAGCAAAGATGACGCTAGTTATCGGCTCTCGAAGTGTTTGGCTAGCGCGAATTTTGGCGACCTGACCGATTGGAACGATTGCTGTTGCAAAGTCCGGCCCACAGCCCATTTTCTCATGAATGCGCGCTCAGAGAA',
'CCGCATGAAGTGTCGAATGGCGTTAATTATTACATTCCCTACAGCGTGAAGTTAAATCTGAGGAATTGACGGATTAGGCGGACTAGAGGCAGCCATGAGGTCTTAATATACTGACCCGGAGAGATCCACTTAGCTTCTCCCATGCCCTGTGTAAGGGTAGACTATTCAGCGGATAACGCTCGCGTCCGTCCGGGGTTTTCATACAATCCCGGATGTAATGGCATCCATTTAAGCTTGACAAAATAGTGCATATTGACGTTGAGCATCCATCAGGAGGTCTATGGACAGCCACTCATGTGGGAATCTCTGTGCCACCTCCTGATAGGGCGG',
'TACAATCCCTAGTCGCTGCTTCCTACATGAGTGTTACAAGAACTCCAGGCTCACGCCCTCCAAGGCATAAATCAGTTGATTATACCCCACAACTACCAGAGCCGGCTCCGACCAGAGTATCTGTTTAAACTTCCAGGTACAGGTGTTTTTGTACAGAGGTGTCGTACAGTGTTCTCTGTTGGGCGTACGATCTAAAAACTGGCACATGAATACGCTGGGAGATCGCCTAGCGCAGCAACTCGTTTGCACAAGCGTGCATTGCTTCGGTAAACACGGGATAATCCAATAAGATTGGATACATTGACAGCATCCTGTGAAGCTTTGGGTTCA',
'CACATTTGCGGATTAGGTGTAGCAGACTTGCCCCGAGAGATCCGGAATGAAAGGCTGCAAGTAAGAGTGTAATTCTAACTCCCTTCTAACGCTGCATAAAAAGCATGAACCTGGCCAAGCCGGTCACAATGGCGCAGCGTTTACCCCGTGCCCATAGGAACTGGACCCATTTATCGATATGGTGCACCTTACTGGTGGTTTCCGACGTTGCCACTGTCTGTCGCGTAATTCTACCCTCTGAGGGGGGCCACTGGGGAATTCCCTGTATGTTGACGCTTGTAACGAGAGAGATATCTTCCCACGTACGCTTCCGCAGGGTTCTGACGCGAG'
]

DNA_ordered = {}
numbers = 1
for seq in DNA:
    DNA_ordered[numbers] = seq
    numbers += 1

#Pseudocounts
A = [float(1)] * k
C = [float(1)] * k
G = [float(1)] * k
T = [float(1)] * k
#Probabilities
a = [float(0)] * k
c = [float(0)] * k
g = [float(0)] * k
t = [float(0)] * k
Total = [float(0)] * k

from random import randint
random_kmers = []
number = 1
for seq in DNA:
    i = randint(0,len(seq)-k)
    random_kmers.append({seq[i:i+k]:number})
    number += 1

best = []
for pair in random_kmers:
    for kmer in pair:
        best.append(kmer)
best_score = score(best,k)

runs = 0
while runs < 500:
    
    from random import randint
    best_kmers = []
    number = 1
    for seq in DNA:
        i = randint(0,len(seq)-k)
        best_kmers.append({seq[i:i+k]:number})
        number += 1

    count = 0
    while count < 75:
        
        roll = randint(1,20)

        #Adjust Frequencies
        A = [float(1)] * k
        C = [float(1)] * k
        G = [float(1)] * k
        T = [float(1)] * k

        for pair in best_kmers:
            for kmer in pair:
                if pair[kmer] != roll:
                    pos = 0
                    for nt in kmer:
                        if nt == "A":
                            A[pos] += 1
                        elif nt == "C":
                            C[pos] += 1
                        elif nt == "G":
                            G[pos] += 1
                        elif nt == "T":
                            T[pos] += 1
                        pos += 1  

        #Reprofile
        Total = [float(0)] * k
        for i in range(0,k):
            Total[i] = A[i]+C[i]+G[i]+T[i]
            a[i] = A[i]/Total[i]
            c[i] = C[i]/Total[i]
            g[i] = G[i]/Total[i]
            t[i] = T[i]/Total[i]
    
        for pair in best_kmers:
            for kmer in pair:
                if pair[kmer] == roll:
                    del pair[kmer]
                    pair[prof_most_prob(DNA_ordered[roll],k,a,c,g,t)] = roll
        
        best_kmers
        challenge = []
        for pair in best_kmers:
            for kmer in pair:
                challenge.append(kmer)
        
        count += 1
        
        if score(challenge,k) < best_score:
            best = challenge
            best_score = score(best,k)
            
    runs +=1
    
for kmer in best:
    print kmer
print score(best,k)

'''
Output
GCAGAAGGTCGTAGC
GCAATCAAACGTTGA
CGCTAAAAACGTTGA
GCATTTTAACGTTGA
ACATAAAAACGTTTT
GCATAAAAACTCGGA
GCATAAAAACGCAAA
GCATAAAACATTTGA
GTTAAAAAACGTTGA
GCATACGCACGTTGA
GCATAAGCGCGTTGA
GCATAAGGGCGTTGA
AGATAAAAACGTTGG
GCATAAAAACGTACC
GCACCCAAACGTTGA
GCTCCAAAACGTTGA
GCATCCTAACGTTGA
GCATATTGACGTTGA
GCATAAATCAGTTGA
GCATAAAAAGCATGA
63
'''
